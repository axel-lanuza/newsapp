{"version":3,"sources":["components/Loading/Loading.js","components/Button/index.js","components/Table/index.js","constants/index.js","components/App/index.js","serviceWorker.js","components/Javascript/index.js","components/Python/index.js","components/PHP/index.js","index.js"],"names":["Loading","message","Search","this","input","focus","props","onChange","value","children","onSubmit","FormGroup","style","fontWeight","border","width","className","type","ref","node","Component","Sort","sortKey","onSort","activeSortKey","sortClass","push","join","onClick","Button","defaultProps","SORTS","NONE","list","TITLE","sortBy","AUTHOR","COMMENTS","reverse","POINTS","Table","state","isSortReverse","bind","setState","removeItem","sortedList","reverseSortedList","map","item","key","objectID","href","url","title","author","num_comments","points","PATH_BASE","PARAM_HPP","urlTemplate","console","log","App","results","searchKey","searchTerm","isLoading","searchValue","fetchTopStories","setTopStories","checkTopStoriesSearchTerm","result","hits","page","prevState","oldHits","updatedHits","updateTopStories","fetch","then","response","json","catch","e","event","preventDefault","id","updatedList","filter","target","Container","fluid","Row","ButtonWithLoading","rest","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","Javascript","withLoading","Python","Php","Root","basename","Navbar","Nav","Brand","to","Toggle","Collapse","NavItem","exact","activeClassName","path","component","About","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"wPAOeA,G,MAFC,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAAF,OAAe,4BAAKA,K,gBCDvBC,EAAb,kLAGMC,KAAKC,MAAMC,UAHjB,+BAMc,IAAD,SAEyCF,KAAKG,MAA7CC,EAFD,EAECA,SAAUC,EAFX,EAEWA,MAAOC,EAFlB,EAEkBA,SAAUC,EAF5B,EAE4BA,SAEnC,OACE,0BAAMA,SAAWA,GACjB,kBAACC,EAAA,EAAD,KAEE,wBAAIC,MAAO,CAAEC,WAAY,SAAYJ,GACrC,wBAAIG,MAAO,CAAEE,OAAQ,kBAAmBC,MAAO,UAE/C,yBAAKC,UAAU,eAEf,2BACEA,UAAU,mCACVC,KAAK,OACLT,MAAOA,EACPD,SAAUA,EACVW,IAAK,SAACC,GAAU,EAAKf,MAAQe,KAG/B,0BAAMH,UAAU,mBACd,4BACEA,UAAU,4BACVC,KAAK,UAFP,kBA5BZ,GAA4BG,aA6CfC,EAAO,SAAC,GAClB,IADoBC,EACrB,EADqBA,QAASC,EAC9B,EAD8BA,OAAQd,EACtC,EADsCA,SAAqBe,GAC3D,EADgDR,UAChD,EAD2DQ,eAEnDC,EAAY,CAAC,2BAKnB,OAJIH,IAAYE,GACdC,EAAUC,KAAK,mBAIf,kBAAC,EAAD,CACEV,UAAYS,EAAUE,KAAK,KAC3BC,QAAU,kBAAML,EAAOD,KAEtBb,IAKIoB,EAAS,SAAC,GAAD,IAAGD,EAAH,EAAGA,QAASnB,EAAZ,EAAYA,SAAZ,IAAsBO,iBAAtB,MAAgC,GAAhC,SACpB,4BACEA,UAAYA,EACZY,QAAUA,GACRnB,IASNoB,EAAOC,aAAe,CACpBd,UAAW,IC1Eb,IAAMe,EAAQ,CACVC,KAAM,SAACC,GAAD,OAAUA,GAChBC,MAAO,SAAAD,GAAI,OAAIE,iBAAOF,EAAM,UAC5BG,OAAQ,SAAAH,GAAI,OAAIE,iBAAOF,EAAM,WAC7BI,SAAU,SAAAJ,GAAI,OAAIE,iBAAOF,EAAM,gBAAgBK,WAC/CC,OAAQ,SAAAN,GAAI,OAAIE,iBAAOF,EAAM,UAAUK,YA8G5BE,E,kDA1GX,WAAYlC,GAAQ,IAAD,8BACf,cAAMA,IACDmC,MAAQ,CACbnB,QAAS,OACToB,eAAe,GAEf,EAAKnB,OAAS,EAAKA,OAAOoB,KAAZ,gBANC,E,mDASZrB,GACH,IAAMoB,EAAgBvC,KAAKsC,MAAMnB,UAAYA,IAAYnB,KAAKsC,MAAMC,cACpEvC,KAAKyC,SAAU,CACftB,UACAoB,oB,+BAIM,IAAD,EACwBvC,KAAKG,MAA1B2B,EADH,EACGA,KAAMY,EADT,EACSA,WADT,EAE8B1C,KAAKsC,MAAhCnB,EAFH,EAEGA,QAASoB,EAFZ,EAEYA,cACXI,EAAaf,EAAMT,GAASW,GAC5Bc,EAAoBL,EAAgBI,EAAWR,UAAYQ,EAEjE,OACI,yBAAK9B,UAAU,aACf,yBAAKA,UAAU,eACX,6BACA,kBAAC,EAAD,CACAA,UAAU,iCACVM,QAAU,OACVC,OAASpB,KAAKoB,OACdC,cAAgBF,GAJhB,WAOA,kBAAC,EAAD,CACAN,UAAU,iCACVM,QAAU,QACVC,OAASpB,KAAKoB,OACdC,cAAgBF,GAJhB,SAOZ,kBAAC,EAAD,CACYN,UAAU,iCACVM,QAAU,SACVC,OAASpB,KAAKoB,OACdC,cAAgBF,GAJ5B,UAOA,kBAAC,EAAD,CACYN,UAAU,iCACVM,QAAU,WACVC,OAASpB,KAAKoB,OACdC,cAAgBF,GAJ5B,mBAOA,kBAAC,EAAD,CACYN,UAAU,iCACVM,QAAU,SACVC,OAASpB,KAAKoB,OACdC,cAAgBF,GAJ5B,UAMY,8BAIAyB,EAAkBC,KAAI,SAAAC,GAAI,OACtB,yBAAKC,IAAMD,EAAKE,UAChB,4BACI,uBAAGC,KAAOH,EAAKI,KACbJ,EAAKK,QAEX,4BAEML,EAAKM,OAFX,MAEwBN,EAAKO,aAF7B,eAEyDP,EAAKQ,OAF9D,UAIA,kBAAC,EAAD,CACIzC,UAAU,aACVC,KAAK,SACLW,QAAU,kBAAMiB,EAAWI,EAAKE,YAHpC,WATA,IAgBM,sC,GAnFN/B,a,gBCVPsC,EAAY,gCAIZC,EAAY,eCGnBC,EAAW,UAAMF,GAAN,ODNU,UCMV,YDLW,UCKX,ODXY,QCWZ,YDJS,SCIT,ODVW,ECUX,YAA8FC,GAA9F,ODTU,KCU3BE,QAAQC,IAAIF,GAMZ,IAAqBxC,EAYf2C,E,kDAGJ,WAAYzD,GAAO,IAAD,8BAEhB,cAAMA,IAGDmC,MAAQ,CACXuB,QAAS,KACTC,UAAW,GACXC,WDzCuB,QC0CvBC,WAAW,GAIb,EAAKtB,WAAa,EAAKA,WAAWF,KAAhB,gBAClB,EAAKyB,YAAc,EAAKA,YAAYzB,KAAjB,gBACnB,EAAK0B,gBAAkB,EAAKA,gBAAgB1B,KAArB,gBACvB,EAAK2B,cAAgB,EAAKA,cAAc3B,KAAnB,gBACrB,EAAKjC,SAAW,EAAKA,SAASiC,KAAd,gBAChB,EAAK4B,0BAA4B,EAAKA,0BAA0B5B,KAA/B,gBAlBjB,E,sEAsBQuB,GACxB,OAAQ/D,KAAKsC,MAAMuB,QAAQE,K,oCAIfM,GAAO,IAEXC,EAAeD,EAAfC,KAAMC,EAASF,EAATE,KAadvE,KAAKyC,SAvDgB,SAAC6B,EAAMC,GAAP,OAAgB,SAACC,GAAe,IAChDV,EAAsBU,EAAtBV,UAAWD,EAAWW,EAAXX,QACZY,EAAUZ,GAAWA,EAAQC,GAAaD,EAAQC,GAAWQ,KAAO,GACpEI,EAAW,sBAAOD,GAAP,YAAmBH,IAEpC,MAAO,CACLT,QAAQ,2BAAKA,GAAN,kBAAeC,EAAY,CAACQ,KAAMI,EAAaH,UACtDP,WAAW,IAgDGW,CAAiBL,EAAMC,M,sCAIvBR,EAAYQ,GAAM,IAAD,OAC/BvE,KAAKyC,SAAS,CACZuB,WAAW,IAEbY,MAAM,GAAD,OAAIrB,GAAJ,OD9EkB,UC8ElB,YD7EmB,UC6EnB,OAA8CQ,EAA9C,kBD5EiB,SC4EjB,OACWQ,EADX,YACmBf,GADnB,ODjFkB,MCmFpBqB,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAAAR,GACJ,OAAO,EAAKF,cAAcE,MAE3BW,OAAM,SAAAC,GAAC,OAAIA,O,0CAIK,IACZlB,EAAc/D,KAAKsC,MAAnByB,WACP/D,KAAKyC,SAAS,CACZqB,UAAWC,IAEb/D,KAAKkE,gBAAgBH,EDnGG,K,+BCuGjBmB,GAAQ,IACRnB,EAAc/D,KAAKsC,MAAnByB,WACP/D,KAAKyC,SAAS,CACZqB,UAAWC,IAET/D,KAAKoE,0BAA0BL,IACjC/D,KAAKkE,gBAAgBlE,KAAKsC,MAAMyB,WD7GV,GC+GxBmB,EAAMC,mB,iCAKEC,GAAI,IAAD,EACkBpF,KAAKsC,MAA5BuB,EADK,EACLA,QAASC,EADJ,EACIA,UADJ,EAEUD,EAAQC,GAAvBQ,EAFK,EAELA,KAAMC,EAFD,EAECA,KAERc,EAAcf,EAAKgB,QAAO,SAAAxC,GAAI,OAAIA,EAAKE,WAAaoC,KAE1DpF,KAAKyC,SAAS,CACZoB,QAAQ,2BACHA,GADE,kBAEJC,EAAY,CAAEQ,KAAMe,EAAad,c,kCAM3BW,GAEXlF,KAAKyC,SAAS,CAAEsB,WAAYmB,EAAMK,OAAOlF,U,+BAG/B,IAAD,SAE+CL,KAAKsC,MAAnDuB,EAFD,EAECA,QAASE,EAFV,EAEUA,WAAYD,EAFtB,EAEsBA,UAAWE,EAFjC,EAEiCA,UAGlCO,EAAQV,GAAWA,EAAQC,IAAcD,EAAQC,GAAWS,MAAS,EAErEzC,EAAQ+B,GAAWA,EAAQC,IAAcD,EAAQC,GAAWQ,MAAS,GAE3E,OACE,6BAEE,kBAACkB,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,KACE,yBAAK7E,UAAU,yBAEf,kBAAC,EAAD,CACET,SAAWJ,KAAKiE,YAChB5D,MAAQ0D,EACRxD,SAAWP,KAAKO,UAHlB,cASJ,kBAACiF,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,KACE,kBAAC,EAAD,CACE5D,KAAOA,EACPY,WAAa1C,KAAK0C,eAIxB,kBAAC8C,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,KACE,yBAAK7E,UAAU,qBACX,kBAAC8E,EAAD,CACI3B,UAAYA,EACZnD,UAAU,kBACVY,QACE,kBAAM,EAAKyC,gBAAgBH,EAAYQ,EAAO,KAJpD,6B,GA/IEtD,aAgKZ0E,GA5Ke1E,EA4KiBS,EA5KH,gBAAEsC,EAAF,EAAEA,UAAc4B,EAAhB,oCAA0B5B,EAAY,kBAAC,EAAD,CAASlE,QAAQ,oBAAuB,kBAACmB,EAAc2E,KA8KjHhC,I,uCCpLTiC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTvB,MAAK,SAAA4B,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBrE,QACfgE,UAAUC,cAAcO,YAI1BpD,QAAQC,IACN,iHAKE0C,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlB/C,QAAQC,IAAI,sCAGR0C,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5BzB,OAAM,SAAAiC,GACLvD,QAAQuD,MAAM,4CAA6CA,MCrFjE,IAAMxD,EAAW,UAAMF,GAAN,OHNU,UGMV,YHLW,UGKX,OHXY,QGWZ,YHJS,SGIT,OHVW,EGUX,YAA8FC,GAA9F,OHTU,KGU3BE,QAAQC,IAAIF,GAMZ,IAYMyD,E,kDAGJ,WAAY/G,GAAO,IAAD,8BAEhB,cAAMA,IAGDmC,MAAQ,CACXuB,QAAS,KACTC,UAAW,GACXC,WAAY,aACZC,WAAW,GAIb,EAAKtB,WAAa,EAAKA,WAAWF,KAAhB,gBAClB,EAAKyB,YAAc,EAAKA,YAAYzB,KAAjB,gBACnB,EAAK0B,gBAAkB,EAAKA,gBAAgB1B,KAArB,gBACvB,EAAK2B,cAAgB,EAAKA,cAAc3B,KAAnB,gBACrB,EAAKjC,SAAW,EAAKA,SAASiC,KAAd,gBAChB,EAAK4B,0BAA4B,EAAKA,0BAA0B5B,KAA/B,gBAlBjB,E,sEAsBQuB,GACxB,OAAQ/D,KAAKsC,MAAMuB,QAAQE,K,oCAIfM,GAAO,IAEXC,EAAeD,EAAfC,KAAMC,EAASF,EAATE,KAadvE,KAAKyC,SAvDgB,SAAC6B,EAAMC,GAAP,OAAgB,SAACC,GAAe,IAChDV,EAAsBU,EAAtBV,UAAWD,EAAWW,EAAXX,QACZY,EAAUZ,GAAWA,EAAQC,GAAaD,EAAQC,GAAWQ,KAAO,GACpEI,EAAW,sBAAOD,GAAP,YAAmBH,IAEpC,MAAO,CACLT,QAAQ,2BAAKA,GAAN,kBAAeC,EAAY,CAACQ,KAAMI,EAAaH,UACtDP,WAAW,IAgDGW,CAAiBL,EAAMC,M,sCAIvBR,EAAYQ,GAAM,IAAD,OAC/BvE,KAAKyC,SAAS,CACZuB,WAAW,IAEbY,MAAM,GAAD,OAAIrB,GAAJ,OH9EkB,UG8ElB,YH7EmB,UG6EnB,OAA8CQ,EAA9C,kBH5EiB,SG4EjB,OACWQ,EADX,YACmBf,GADnB,OHjFkB,MGmFpBqB,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAAAR,GACJ,OAAO,EAAKF,cAAcE,MAE3BW,OAAM,SAAAC,GAAC,OAAIA,O,0CAIK,IACZlB,EAAc/D,KAAKsC,MAAnByB,WACP/D,KAAKyC,SAAS,CACZqB,UAAWC,IAEb/D,KAAKkE,gBAAgBH,EHnGG,K,+BGuGjBmB,GAAQ,IACRnB,EAAc/D,KAAKsC,MAAnByB,WACP/D,KAAKyC,SAAS,CACZqB,UAAWC,IAET/D,KAAKoE,0BAA0BL,IACjC/D,KAAKkE,gBAAgBlE,KAAKsC,MAAMyB,WH7GV,GG+GxBmB,EAAMC,mB,iCAKEC,GAAI,IAAD,EACkBpF,KAAKsC,MAA5BuB,EADK,EACLA,QAASC,EADJ,EACIA,UADJ,EAEUD,EAAQC,GAAvBQ,EAFK,EAELA,KAAMC,EAFD,EAECA,KAERc,EAAcf,EAAKgB,QAAO,SAAAxC,GAAI,OAAIA,EAAKE,WAAaoC,KAE1DpF,KAAKyC,SAAS,CACZoB,QAAQ,2BACHA,GADE,kBAEJC,EAAY,CAAEQ,KAAMe,EAAad,c,kCAM3BW,GAEXlF,KAAKyC,SAAS,CAAEsB,WAAYmB,EAAMK,OAAOlF,U,+BAG/B,IAAD,SAE+CL,KAAKsC,MAAnDuB,EAFD,EAECA,QAASE,EAFV,EAEUA,WAAYD,EAFtB,EAEsBA,UAAWE,EAFjC,EAEiCA,UAGlCO,EAAQV,GAAWA,EAAQC,IAAcD,EAAQC,GAAWS,MAAS,EAErEzC,EAAQ+B,GAAWA,EAAQC,IAAcD,EAAQC,GAAWQ,MAAS,GAE3E,OACE,6BAEE,kBAACkB,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,KACE,yBAAK7E,UAAU,yBAEf,kBAAC,EAAD,CACET,SAAWJ,KAAKiE,YAChB5D,MAAQ0D,EACRxD,SAAWP,KAAKO,UAHlB,cASJ,kBAACiF,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,KACE,kBAAC,EAAD,CACE5D,KAAOA,EACPY,WAAa1C,KAAK0C,eAIxB,kBAAC8C,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,KACE,yBAAK7E,UAAU,qBACX,kBAAC,EAAD,CACImD,UAAYA,EACZnD,UAAU,kBACVY,QACE,kBAAM,EAAKyC,gBAAgBH,EAAYQ,EAAO,KAJpD,6B,GA/IStD,aAgKnB0E,EA5Kc,SAAC1E,GAAD,OAAe,gBAAE+C,EAAF,EAAEA,UAAc4B,EAAhB,oCAA0B5B,EAAY,kBAAC,EAAD,CAASlE,QAAQ,oBAAuB,kBAACmB,EAAc2E,IA4KtGuB,CAAYzF,GAEvBwF,ICrLTzD,EAAW,UAAMF,GAAN,OJNU,UIMV,YJLW,UIKX,OJXY,QIWZ,YJJS,SIIT,OJVW,EIUX,YAA8FC,GAA9F,OJTU,KIU3BE,QAAQC,IAAIF,GAMZ,IAYM2D,E,kDAGJ,WAAYjH,GAAO,IAAD,8BAEhB,cAAMA,IAGDmC,MAAQ,CACXuB,QAAS,KACTC,UAAW,GACXC,WAAY,SACZC,WAAW,GAIb,EAAKtB,WAAa,EAAKA,WAAWF,KAAhB,gBAClB,EAAKyB,YAAc,EAAKA,YAAYzB,KAAjB,gBACnB,EAAK0B,gBAAkB,EAAKA,gBAAgB1B,KAArB,gBACvB,EAAK2B,cAAgB,EAAKA,cAAc3B,KAAnB,gBACrB,EAAKjC,SAAW,EAAKA,SAASiC,KAAd,gBAChB,EAAK4B,0BAA4B,EAAKA,0BAA0B5B,KAA/B,gBAlBjB,E,sEAsBQuB,GACxB,OAAQ/D,KAAKsC,MAAMuB,QAAQE,K,oCAIfM,GAAO,IAEXC,EAAeD,EAAfC,KAAMC,EAASF,EAATE,KAadvE,KAAKyC,SAvDgB,SAAC6B,EAAMC,GAAP,OAAgB,SAACC,GAAe,IAChDV,EAAsBU,EAAtBV,UAAWD,EAAWW,EAAXX,QACZY,EAAUZ,GAAWA,EAAQC,GAAaD,EAAQC,GAAWQ,KAAO,GACpEI,EAAW,sBAAOD,GAAP,YAAmBH,IAEpC,MAAO,CACLT,QAAQ,2BAAKA,GAAN,kBAAeC,EAAY,CAACQ,KAAMI,EAAaH,UACtDP,WAAW,IAgDGW,CAAiBL,EAAMC,M,sCAIvBR,EAAYQ,GAAM,IAAD,OAC/BvE,KAAKyC,SAAS,CACZuB,WAAW,IAEbY,MAAM,GAAD,OAAIrB,GAAJ,OJ9EkB,UI8ElB,YJ7EmB,UI6EnB,OAA8CQ,EAA9C,kBJ5EiB,SI4EjB,OACWQ,EADX,YACmBf,GADnB,OJjFkB,MImFpBqB,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAAAR,GACJ,OAAO,EAAKF,cAAcE,MAE3BW,OAAM,SAAAC,GAAC,OAAIA,O,0CAIK,IACZlB,EAAc/D,KAAKsC,MAAnByB,WACP/D,KAAKyC,SAAS,CACZqB,UAAWC,IAEb/D,KAAKkE,gBAAgBH,EJnGG,K,+BIuGjBmB,GAAQ,IACRnB,EAAc/D,KAAKsC,MAAnByB,WACP/D,KAAKyC,SAAS,CACZqB,UAAWC,IAET/D,KAAKoE,0BAA0BL,IACjC/D,KAAKkE,gBAAgBlE,KAAKsC,MAAMyB,WJ7GV,GI+GxBmB,EAAMC,mB,iCAKEC,GAAI,IAAD,EACkBpF,KAAKsC,MAA5BuB,EADK,EACLA,QAASC,EADJ,EACIA,UADJ,EAEUD,EAAQC,GAAvBQ,EAFK,EAELA,KAAMC,EAFD,EAECA,KAERc,EAAcf,EAAKgB,QAAO,SAAAxC,GAAI,OAAIA,EAAKE,WAAaoC,KAE1DpF,KAAKyC,SAAS,CACZoB,QAAQ,2BACHA,GADE,kBAEJC,EAAY,CAAEQ,KAAMe,EAAad,c,kCAM3BW,GAEXlF,KAAKyC,SAAS,CAAEsB,WAAYmB,EAAMK,OAAOlF,U,+BAG/B,IAAD,SAE+CL,KAAKsC,MAAnDuB,EAFD,EAECA,QAASE,EAFV,EAEUA,WAAYD,EAFtB,EAEsBA,UAAWE,EAFjC,EAEiCA,UAGlCO,EAAQV,GAAWA,EAAQC,IAAcD,EAAQC,GAAWS,MAAS,EAErEzC,EAAQ+B,GAAWA,EAAQC,IAAcD,EAAQC,GAAWQ,MAAS,GAE3E,OACE,6BAEE,kBAACkB,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,KACE,yBAAK7E,UAAU,yBAEf,kBAAC,EAAD,CACET,SAAWJ,KAAKiE,YAChB5D,MAAQ0D,EACRxD,SAAWP,KAAKO,UAHlB,cASJ,kBAACiF,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,KACE,kBAAC,EAAD,CACE5D,KAAOA,EACPY,WAAa1C,KAAK0C,eAIxB,kBAAC8C,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,KACE,yBAAK7E,UAAU,qBACX,kBAAC,EAAD,CACImD,UAAYA,EACZnD,UAAU,kBACVY,QACE,kBAAM,EAAKyC,gBAAgBH,EAAYQ,EAAO,KAJpD,6B,GA/IKtD,aAgKf0E,EA5Kc,SAAC1E,GAAD,OAAe,gBAAE+C,EAAF,EAAEA,UAAc4B,EAAhB,oCAA0B5B,EAAY,kBAAC,EAAD,CAASlE,QAAQ,oBAAuB,kBAACmB,EAAc2E,IA4KtGuB,CAAYzF,GAEvB0F,ICrLT3D,EAAW,UAAMF,GAAN,OLNU,UKMV,YLLW,UKKX,OLXY,QKWZ,YLJS,SKIT,OLVW,EKUX,YAA8FC,GAA9F,OLTU,KKU3BE,QAAQC,IAAIF,GAMZ,IAYM4D,E,kDAGJ,WAAYlH,GAAO,IAAD,8BAEhB,cAAMA,IAGDmC,MAAQ,CACXuB,QAAS,KACTC,UAAW,GACXC,WAAY,MACZC,WAAW,GAIb,EAAKtB,WAAa,EAAKA,WAAWF,KAAhB,gBAClB,EAAKyB,YAAc,EAAKA,YAAYzB,KAAjB,gBACnB,EAAK0B,gBAAkB,EAAKA,gBAAgB1B,KAArB,gBACvB,EAAK2B,cAAgB,EAAKA,cAAc3B,KAAnB,gBACrB,EAAKjC,SAAW,EAAKA,SAASiC,KAAd,gBAChB,EAAK4B,0BAA4B,EAAKA,0BAA0B5B,KAA/B,gBAlBjB,E,sEAsBQuB,GACxB,OAAQ/D,KAAKsC,MAAMuB,QAAQE,K,oCAIfM,GAAO,IAEXC,EAAeD,EAAfC,KAAMC,EAASF,EAATE,KAadvE,KAAKyC,SAvDgB,SAAC6B,EAAMC,GAAP,OAAgB,SAACC,GAAe,IAChDV,EAAsBU,EAAtBV,UAAWD,EAAWW,EAAXX,QACZY,EAAUZ,GAAWA,EAAQC,GAAaD,EAAQC,GAAWQ,KAAO,GACpEI,EAAW,sBAAOD,GAAP,YAAmBH,IAEpC,MAAO,CACLT,QAAQ,2BAAKA,GAAN,kBAAeC,EAAY,CAACQ,KAAMI,EAAaH,UACtDP,WAAW,IAgDGW,CAAiBL,EAAMC,M,sCAIvBR,EAAYQ,GAAM,IAAD,OAC/BvE,KAAKyC,SAAS,CACZuB,WAAW,IAEbY,MAAM,GAAD,OAAIrB,GAAJ,OL9EkB,UK8ElB,YL7EmB,UK6EnB,OAA8CQ,EAA9C,kBL5EiB,SK4EjB,OACWQ,EADX,YACmBf,GADnB,OLjFkB,MKmFpBqB,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAAAR,GACJ,OAAO,EAAKF,cAAcE,MAE3BW,OAAM,SAAAC,GAAC,OAAIA,O,0CAIK,IACZlB,EAAc/D,KAAKsC,MAAnByB,WACP/D,KAAKyC,SAAS,CACZqB,UAAWC,IAEb/D,KAAKkE,gBAAgBH,ELnGG,K,+BKuGjBmB,GAAQ,IACRnB,EAAc/D,KAAKsC,MAAnByB,WACP/D,KAAKyC,SAAS,CACZqB,UAAWC,IAET/D,KAAKoE,0BAA0BL,IACjC/D,KAAKkE,gBAAgBlE,KAAKsC,MAAMyB,WL7GV,GK+GxBmB,EAAMC,mB,iCAKEC,GAAI,IAAD,EACkBpF,KAAKsC,MAA5BuB,EADK,EACLA,QAASC,EADJ,EACIA,UADJ,EAEUD,EAAQC,GAAvBQ,EAFK,EAELA,KAAMC,EAFD,EAECA,KAERc,EAAcf,EAAKgB,QAAO,SAAAxC,GAAI,OAAIA,EAAKE,WAAaoC,KAE1DpF,KAAKyC,SAAS,CACZoB,QAAQ,2BACHA,GADE,kBAEJC,EAAY,CAAEQ,KAAMe,EAAad,c,kCAM3BW,GAEXlF,KAAKyC,SAAS,CAAEsB,WAAYmB,EAAMK,OAAOlF,U,+BAG/B,IAAD,SAE+CL,KAAKsC,MAAnDuB,EAFD,EAECA,QAASE,EAFV,EAEUA,WAAYD,EAFtB,EAEsBA,UAAWE,EAFjC,EAEiCA,UAGlCO,EAAQV,GAAWA,EAAQC,IAAcD,EAAQC,GAAWS,MAAS,EAErEzC,EAAQ+B,GAAWA,EAAQC,IAAcD,EAAQC,GAAWQ,MAAS,GAE3E,OACE,6BAEE,kBAACkB,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,KACE,yBAAK7E,UAAU,yBAEf,kBAAC,EAAD,CACET,SAAWJ,KAAKiE,YAChB5D,MAAQ0D,EACRxD,SAAWP,KAAKO,UAHlB,cASJ,kBAACiF,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,KACE,kBAAC,EAAD,CACE5D,KAAOA,EACPY,WAAa1C,KAAK0C,eAIxB,kBAAC8C,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,KACE,yBAAK7E,UAAU,qBACX,kBAAC,EAAD,CACImD,UAAYA,EACZnD,UAAU,kBACVY,QACE,kBAAM,EAAKyC,gBAAgBH,EAAYQ,EAAO,KAJpD,6B,GA/IEtD,aAgKZ0E,EA5Kc,SAAC1E,GAAD,OAAe,gBAAE+C,EAAF,EAAEA,UAAc4B,EAAhB,oCAA0B5B,EAAY,kBAAC,EAAD,CAASlE,QAAQ,oBAAuB,kBAACmB,EAAc2E,IA4KtGuB,CAAYzF,GAEvB2F,ICtLTC,EAAO,kBACX,kBAAC,IAAD,CAAQC,SAAS,aACf,6BACE,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACE,kBAACD,EAAA,EAAOE,MAAR,KACI,kBAAC,IAAD,CAAM7G,UAAU,WAAW8G,GAAG,KAA9B,aAEJ,kBAACH,EAAA,EAAOI,OAAR,OAEF,kBAACJ,EAAA,EAAOK,SAAR,KACE,kBAACJ,EAAA,EAAD,KACE,kBAACK,EAAA,EAAD,CAASC,OAAK,EAACC,gBAAgB,UAC7B,kBAAC,IAAD,CAAMnH,UAAU,WAAW8G,GAAG,UAA9B,UAEF,kBAACG,EAAA,EAAD,CAAUE,gBAAgB,UACxB,kBAAC,IAAD,CAAMnH,UAAU,WAAWmH,gBAAgB,SAASL,GAAG,eAAvD,eAEF,kBAACG,EAAA,EAAD,CAAUE,gBAAgB,UACxB,kBAAC,IAAD,CAAMnH,UAAU,WAAWmH,gBAAgB,SAASL,GAAG,WAAvD,WAEF,kBAACG,EAAA,EAAD,CAAUE,gBAAgB,UACxB,kBAAC,IAAD,CAAMnH,UAAU,WAAWmH,gBAAgB,SAASL,GAAG,QAAvD,WAKV,kBAAC,IAAD,CAAOI,OAAK,EAACE,KAAK,IAAIC,UAAYtE,IAClC,kBAAC,IAAD,CAAOmE,OAAK,EAACE,KAAK,SAASC,UAAYC,IACvC,kBAAC,IAAD,CAAOJ,OAAK,EAACE,KAAK,cAAcC,UAAYhB,IAC5C,kBAAC,IAAD,CAAOa,OAAK,EAACE,KAAK,UAAUC,UAAYd,IACxC,kBAAC,IAAD,CAAOW,OAAK,EAACE,KAAK,OAAOC,UAAYb,OAIrCc,EAAQ,kBACd,6BACI,uDAKJC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SJlCnB,SAAkBnC,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAImC,IAAIC,WAAwB3C,OAAOC,SAAS/C,MACpD0F,SAAW5C,OAAOC,SAAS2C,OAIvC,OAGF5C,OAAO6C,iBAAiB,QAAQ,WAC9B,IAAMxC,EAAK,UAAMsC,WAAN,sBAEP7C,IAgEV,SAAiCO,EAAOC,GAEtCzB,MAAMwB,EAAO,CACXyC,QAAS,CAAE,iBAAkB,YAE5BhE,MAAK,SAAAC,GAEJ,IAAMgE,EAAchE,EAAS+D,QAAQE,IAAI,gBAEnB,MAApBjE,EAASkE,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C3C,UAAUC,cAAc2C,MAAMrE,MAAK,SAAA4B,GACjCA,EAAa0C,aAAatE,MAAK,WAC7BkB,OAAOC,SAASoD,eAKpBjD,EAAgBC,EAAOC,MAG1BrB,OAAM,WACLtB,QAAQC,IACN,oEAvFA0F,CAAwBjD,EAAOC,GAI/BC,UAAUC,cAAc2C,MAAMrE,MAAK,WACjCnB,QAAQC,IACN,iHAMJwC,EAAgBC,EAAOC,OIY/BE,K","file":"static/js/main.42fc59f4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// export \r\n// const Loading = (props) => <h2>{props.message}</h2>\r\n//Destructuring props\r\nconst Loading = ({message}) => <h2>{message}</h2>\r\n\r\nexport default Loading;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Container, Row, Col, FormGroup }from 'react-bootstrap';\r\n\r\nexport class Search extends Component {\r\n\r\n    componentDidMount() {\r\n      this.input.focus();\r\n    }\r\n  \r\n    render() {\r\n  \r\n      const { onChange, value, children, onSubmit } = this.props;\r\n  \r\n      return(\r\n        <form onSubmit= {onSubmit}>\r\n        <FormGroup>\r\n  \r\n          <h1 style={{ fontWeight: 'bold' }}>{ children }</h1> \r\n          <hr style={{ border: '2px solid black', width: '100%' }} />\r\n  \r\n          <div className=\"input-group\">\r\n  \r\n          <input\r\n            className=\"form-control width100 searchForm\" \r\n            type=\"text\" \r\n            value={value}\r\n            onChange={onChange}\r\n            ref={(node) => {this.input = node}}\r\n          />\r\n  \r\n          <span className=\"input-group-btn\">\r\n            <button\r\n              className=\"btn btn-primary searchBtn\"\r\n              type=\"submit\"\r\n            >\r\n              Search\r\n            </button>\r\n          </span>\r\n  \r\n          </div>\r\n  \r\n          </FormGroup>\r\n        </form>\r\n      )\r\n    }\r\n  \r\n}\r\n\r\nexport const Sort = ({ sortKey, onSort, children, className, activeSortKey }) => \r\n  {\r\n    const sortClass = ['btn btn-default sortBtn'];\r\n    if (sortKey === activeSortKey) {\r\n      sortClass.push('btn btn-primary');\r\n    }\r\n\r\n    return (\r\n      <Button \r\n        className={ sortClass.join(' ') }\r\n        onClick={ () => onSort(sortKey)}\r\n      >\r\n        {children}\r\n      </Button>\r\n    )\r\n}\r\n\r\nexport const Button = ({ onClick, children, className='' }) => \r\n  <button\r\n    className={ className }  \r\n    onClick={ onClick } >\r\n    { children }\r\n  </button>\r\n\r\nButton.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n  className: PropTypes.string,\r\n  children: PropTypes.node.isRequired\r\n}\r\n\r\nButton.defaultProps = {\r\n  className: '',\r\n}\r\n","// const Table = ({ list, searchTerm, removeItem, sortKey, onSort, isSortReverse, activeSortKey }) => {\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { sortBy } from 'lodash';\r\nimport { Sort, Button } from '../Button/index';\r\n\r\nconst SORTS = {\r\n    NONE: (list) => list,\r\n    TITLE: list => sortBy(list, 'title'),\r\n    AUTHOR: list => sortBy(list, 'author'),\r\n    COMMENTS: list => sortBy(list, 'num_comments').reverse(),\r\n    POINTS: list => sortBy(list, 'points').reverse()\r\n}\r\n\r\nclass Table extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        sortKey: 'NONE',\r\n        isSortReverse: false\r\n        }\r\n        this.onSort = this.onSort.bind(this);\r\n    }\r\n    // Sorting function\r\n    onSort(sortKey) {\r\n        const isSortReverse = this.state.sortKey === sortKey && !this.state.isSortReverse;\r\n        this.setState( {\r\n        sortKey,\r\n        isSortReverse\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        const { list, removeItem } = this.props;\r\n        const { sortKey, isSortReverse } = this.state;\r\n        const sortedList = SORTS[sortKey](list);\r\n        const reverseSortedList = isSortReverse ? sortedList.reverse() : sortedList;\r\n        \r\n        return(\r\n            <div className=\"col-sm-12\">\r\n            <div className=\"text-center\">\r\n                <hr />\r\n                <Sort\r\n                className='btn btn-xs btn-default sortBtn'\r\n                sortKey={ 'NONE' }\r\n                onSort={ this.onSort }\r\n                activeSortKey={ sortKey }\r\n                >Default</Sort>\r\n    \r\n                <Sort\r\n                className='btn btn-xs btn-default sortBtn'\r\n                sortKey={ 'TITLE' }\r\n                onSort={ this.onSort }\r\n                activeSortKey={ sortKey }\r\n                >Title</Sort>\r\n    \r\n    <Sort\r\n                className='btn btn-xs btn-default sortBtn'\r\n                sortKey={ 'AUTHOR' }\r\n                onSort={ this.onSort }\r\n                activeSortKey={ sortKey }\r\n                >Author</Sort>\r\n    \r\n    <Sort\r\n                className='btn btn-xs btn-default sortBtn'\r\n                sortKey={ 'COMMENTS' }\r\n                onSort={ this.onSort }\r\n                activeSortKey={ sortKey }\r\n                >Num of comments</Sort>\r\n    \r\n    <Sort\r\n                className='btn btn-xs btn-default sortBtn'\r\n                sortKey={ 'POINTS' }\r\n                onSort={ this.onSort }\r\n                activeSortKey={ sortKey }\r\n                >Points</Sort>\r\n                <hr />\r\n            </div>\r\n            {\r\n                // list.filter( isSearched(searchTerm) ).map(item =>   \r\n                reverseSortedList.map(item =>   \r\n                    <div key={ item.objectID }>\r\n                    <h1>\r\n                        <a href={ item.url }>\r\n                        { item.title }</a> \r\n                    </h1>\r\n                    <h4>\r\n    \r\n                        { item.author } | { item.num_comments } Comments | { item.points } Points\r\n                    \r\n                    <Button\r\n                        className=\"btn btn-xs\"\r\n                        type=\"button\"\r\n                        onClick={ () => removeItem(item.objectID) }>\r\n                        Remove\r\n                    </Button>\r\n    \r\n                    </h4> <hr />\r\n    \r\n                    </div>\r\n                )\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nTable.propTypes = {\r\n    list: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n        objectID: PropTypes.string.isRequired,\r\n        author: PropTypes.string,\r\n        url: PropTypes.string,\r\n        num_comments: PropTypes.number,\r\n        points: PropTypes.number\r\n        })\r\n    ).isRequired,\r\n    removeItem: PropTypes.func.isRequired,\r\n    searchTem: PropTypes.string\r\n}\r\n\r\nexport default Table;\r\n","export const DEFAULT_QUERY = 'react';\r\nexport const DEFAULT_PAGE = 0;\r\nexport const DEFAULT_HPP = 100;\r\n\r\nexport const PATH_BASE = 'http://hn.algolia.com/api/v1/';\r\nexport const PATH_SEARCH = '/search';\r\nexport const PARAM_SEARCH = 'query=';\r\nexport const PARAM_PAGE = 'page=';\r\nexport const PARAM_HPP = 'hitsPerPage='","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Loading from '../Loading/Loading';\r\nimport Table from '../../components/Table/index';\r\nimport { Button, Search, Sort } from '../../components/Button/index';\r\nimport { Container, Row, Col, FormGroup }from 'react-bootstrap';\r\nimport { DEFAULT_HPP, DEFAULT_PAGE, DEFAULT_QUERY, PATH_BASE,\r\n         PATH_SEARCH, PARAM_HPP, PARAM_PAGE, PARAM_SEARCH } from '../../constants/index';\r\nimport PropTypes from 'prop-types';\r\nimport { sortBy, update } from 'lodash';\r\n\r\nconst urlTemplate = `${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${DEFAULT_QUERY}&${PARAM_PAGE}${DEFAULT_PAGE}&${PARAM_HPP}${DEFAULT_HPP}`;\r\nconsole.log(urlTemplate);\r\n\r\nfunction isSearched(searchTerm) {\r\n    return (item) => (!searchTerm && !searchTerm.length > 2)|| item.title.toLowerCase().includes(searchTerm.toLowerCase());\r\n}\r\n\r\nconst withLoading = (Component) => ({isLoading, ...rest}) => isLoading ? <Loading message='Loading data...' /> : <Component {...rest} />;\r\n\r\nconst updateTopStories = (hits, page) => (prevState) => {\r\n  const {searchKey, results} = prevState;\r\n  const oldHits = results && results[searchKey] ? results[searchKey].hits : [];\r\n  const updatedHits = [...oldHits, ...hits];\r\n\r\n  return {\r\n    results: {...results,[searchKey]: {hits: updatedHits, page}},\r\n    isLoading: false\r\n  }\r\n};\r\nclass App extends Component {\r\n   // setting up internal component state\r\n  // ES6 class can use constructor to initialize internal state\r\n  constructor(props){\r\n    // super props sets this.props to the constructor\r\n    super(props);\r\n\r\n    // setting up state\r\n    this.state = {\r\n      results: null,\r\n      searchKey: '',\r\n      searchTerm: DEFAULT_QUERY,\r\n      isLoading: false,\r\n    }\r\n\r\n    // bind the functions to this (app component)\r\n    this.removeItem = this.removeItem.bind(this);\r\n    this.searchValue = this.searchValue.bind(this);\r\n    this.fetchTopStories = this.fetchTopStories.bind(this);\r\n    this.setTopStories = this.setTopStories.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n    this.checkTopStoriesSearchTerm = this.checkTopStoriesSearchTerm.bind(this);\r\n  }\r\n\r\n  // check top stories search term\r\n  checkTopStoriesSearchTerm(searchTerm) {\r\n    return !this.state.results[searchTerm];\r\n  }\r\n\r\n  // set top stories\r\n  setTopStories(result){\r\n    // get the hits and page from result\r\n    const { hits, page } = result;\r\n\r\n    // this.setState((prevState) => {\r\n    //   const {searchKey, results} = this.state;\r\n    //   const oldHits = results && results[searchKey] ? results[searchKey].hits : [];\r\n    //   const updatedHits = [...oldHits, ...hits];\r\n\r\n    //   return {\r\n    //     results: {...results,[searchKey]: {hits: updatedHits, page}},\r\n    //     isLoading: false\r\n    //   }\r\n    // });\r\n\r\n    this.setState(updateTopStories(hits, page));\r\n  }\r\n\r\n  // fetch top stories\r\n  fetchTopStories(searchTerm, page){\r\n    this.setState({\r\n      isLoading: true\r\n    })\r\n    fetch(`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}\r\n    &${PARAM_PAGE}${page}&${PARAM_HPP}${DEFAULT_HPP}`)\r\n      .then(response => {       \r\n        return response.json()\r\n      })\r\n      .then(result => {\r\n        return this.setTopStories(result);\r\n      })\r\n      .catch(e => e);\r\n  }\r\n\r\n  // component did mount\r\n  componentDidMount() {\r\n    const {searchTerm} = this.state;\r\n    this.setState({\r\n      searchKey: searchTerm\r\n    });\r\n    this.fetchTopStories(searchTerm, DEFAULT_PAGE);\r\n  }\r\n\r\n  // on search submit function\r\n  onSubmit(event) {\r\n    const {searchTerm} = this.state;\r\n    this.setState({\r\n      searchKey: searchTerm\r\n    });\r\n    if (this.checkTopStoriesSearchTerm(searchTerm)) {\r\n      this.fetchTopStories(this.state.searchTerm, DEFAULT_PAGE);\r\n    }\r\n    event.preventDefault();\r\n  }\r\n\r\n \r\n // lets rewrite removeItem function in ES6\r\n removeItem(id){\r\n  const { results, searchKey } = this.state;\r\n  const { hits, page } = results[searchKey];\r\n  // const isNotId = item => item.objectID !== id;\r\n  const updatedList = hits.filter(item => item.objectID !== id);\r\n  // this.setState({ result: Object.assign({}, this.state.result, {hits: updatedList}) });\r\n  this.setState({ \r\n    results: {\r\n      ...results, \r\n      [searchKey]: { hits: updatedList, page } \r\n    } \r\n  });\r\n }\r\n\r\n // get input field value from search form\r\n searchValue(event){\r\n  // console.log(event)\r\n  this.setState({ searchTerm: event.target.value });\r\n }\r\n\r\n  render() {\r\n\r\n    const { results, searchTerm, searchKey, isLoading } = this.state;\r\n\r\n    // if (!result) { return null; }\r\n    const page = (results && results[searchKey] && results[searchKey].page) || 0;\r\n\r\n    const list = (results && results[searchKey] && results[searchKey].hits) || [];\r\n\r\n    return (\r\n      <div>\r\n\r\n        <Container fluid>\r\n          <Row>\r\n            <div className=\"jumbotron text-center\">\r\n\r\n            <Search\r\n              onChange={ this.searchValue } \r\n              value={ searchTerm }\r\n              onSubmit={ this.onSubmit }\r\n            >NEWSAPP</Search>\r\n\r\n            </div>\r\n          </Row>\r\n        </Container>\r\n        <Container>\r\n          <Row>\r\n            <Table \r\n              list={ list }\r\n              removeItem={ this.removeItem }\r\n            /> \r\n          </Row>\r\n        </Container>\r\n        <Container>\r\n          <Row>\r\n            <div className=\"text-center alert\">\r\n                <ButtonWithLoading \r\n                    isLoading={ isLoading }\r\n                    className=\"btn btn-success\"\r\n                    onClick= {\r\n                      () => this.fetchTopStories(searchTerm, page + 1)\r\n                    }\r\n                  >\r\n                  Load More Entries\r\n                </ButtonWithLoading>\r\n            </div>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst ButtonWithLoading = withLoading(Button);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Loading from '../Loading/Loading';\r\nimport Table from '../../components/Table/index';\r\nimport { Button, Search, Sort } from '../../components/Button/index';\r\nimport { Container, Row, Col, FormGroup }from 'react-bootstrap';\r\nimport { DEFAULT_HPP, DEFAULT_PAGE, DEFAULT_QUERY, PATH_BASE,\r\n         PATH_SEARCH, PARAM_HPP, PARAM_PAGE, PARAM_SEARCH } from '../../constants/index';\r\nimport PropTypes from 'prop-types';\r\nimport { sortBy, update } from 'lodash';\r\n\r\nconst urlTemplate = `${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${DEFAULT_QUERY}&${PARAM_PAGE}${DEFAULT_PAGE}&${PARAM_HPP}${DEFAULT_HPP}`;\r\nconsole.log(urlTemplate);\r\n\r\nfunction isSearched(searchTerm) {\r\n    return (item) => (!searchTerm && !searchTerm.length > 2)|| item.title.toLowerCase().includes(searchTerm.toLowerCase());\r\n}\r\n\r\nconst withLoading = (Component) => ({isLoading, ...rest}) => isLoading ? <Loading message='Loading data...' /> : <Component {...rest} />;\r\n\r\nconst updateTopStories = (hits, page) => (prevState) => {\r\n  const {searchKey, results} = prevState;\r\n  const oldHits = results && results[searchKey] ? results[searchKey].hits : [];\r\n  const updatedHits = [...oldHits, ...hits];\r\n\r\n  return {\r\n    results: {...results,[searchKey]: {hits: updatedHits, page}},\r\n    isLoading: false\r\n  }\r\n};\r\nclass Javascript extends Component {\r\n   // setting up internal component state\r\n  // ES6 class can use constructor to initialize internal state\r\n  constructor(props){\r\n    // super props sets this.props to the constructor\r\n    super(props);\r\n\r\n    // setting up state\r\n    this.state = {\r\n      results: null,\r\n      searchKey: '',\r\n      searchTerm: 'JavaScript',\r\n      isLoading: false,\r\n    }\r\n\r\n    // bind the functions to this (app component)\r\n    this.removeItem = this.removeItem.bind(this);\r\n    this.searchValue = this.searchValue.bind(this);\r\n    this.fetchTopStories = this.fetchTopStories.bind(this);\r\n    this.setTopStories = this.setTopStories.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n    this.checkTopStoriesSearchTerm = this.checkTopStoriesSearchTerm.bind(this);\r\n  }\r\n\r\n  // check top stories search term\r\n  checkTopStoriesSearchTerm(searchTerm) {\r\n    return !this.state.results[searchTerm];\r\n  }\r\n\r\n  // set top stories\r\n  setTopStories(result){\r\n    // get the hits and page from result\r\n    const { hits, page } = result;\r\n\r\n    // this.setState((prevState) => {\r\n    //   const {searchKey, results} = this.state;\r\n    //   const oldHits = results && results[searchKey] ? results[searchKey].hits : [];\r\n    //   const updatedHits = [...oldHits, ...hits];\r\n\r\n    //   return {\r\n    //     results: {...results,[searchKey]: {hits: updatedHits, page}},\r\n    //     isLoading: false\r\n    //   }\r\n    // });\r\n\r\n    this.setState(updateTopStories(hits, page));\r\n  }\r\n\r\n  // fetch top stories\r\n  fetchTopStories(searchTerm, page){\r\n    this.setState({\r\n      isLoading: true\r\n    })\r\n    fetch(`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}\r\n    &${PARAM_PAGE}${page}&${PARAM_HPP}${DEFAULT_HPP}`)\r\n      .then(response => {       \r\n        return response.json()\r\n      })\r\n      .then(result => {\r\n        return this.setTopStories(result);\r\n      })\r\n      .catch(e => e);\r\n  }\r\n\r\n  // component did mount\r\n  componentDidMount() {\r\n    const {searchTerm} = this.state;\r\n    this.setState({\r\n      searchKey: searchTerm\r\n    });\r\n    this.fetchTopStories(searchTerm, DEFAULT_PAGE);\r\n  }\r\n\r\n  // on search submit function\r\n  onSubmit(event) {\r\n    const {searchTerm} = this.state;\r\n    this.setState({\r\n      searchKey: searchTerm\r\n    });\r\n    if (this.checkTopStoriesSearchTerm(searchTerm)) {\r\n      this.fetchTopStories(this.state.searchTerm, DEFAULT_PAGE);\r\n    }\r\n    event.preventDefault();\r\n  }\r\n\r\n \r\n // lets rewrite removeItem function in ES6\r\n removeItem(id){\r\n  const { results, searchKey } = this.state;\r\n  const { hits, page } = results[searchKey];\r\n  // const isNotId = item => item.objectID !== id;\r\n  const updatedList = hits.filter(item => item.objectID !== id);\r\n  // this.setState({ result: Object.assign({}, this.state.result, {hits: updatedList}) });\r\n  this.setState({ \r\n    results: {\r\n      ...results, \r\n      [searchKey]: { hits: updatedList, page } \r\n    } \r\n  });\r\n }\r\n\r\n // get input field value from search form\r\n searchValue(event){\r\n  // console.log(event)\r\n  this.setState({ searchTerm: event.target.value });\r\n }\r\n\r\n  render() {\r\n\r\n    const { results, searchTerm, searchKey, isLoading } = this.state;\r\n\r\n    // if (!result) { return null; }\r\n    const page = (results && results[searchKey] && results[searchKey].page) || 0;\r\n\r\n    const list = (results && results[searchKey] && results[searchKey].hits) || [];\r\n\r\n    return (\r\n      <div>\r\n\r\n        <Container fluid>\r\n          <Row>\r\n            <div className=\"jumbotron text-center\">\r\n\r\n            <Search\r\n              onChange={ this.searchValue } \r\n              value={ searchTerm }\r\n              onSubmit={ this.onSubmit }\r\n            >NEWSAPP</Search>\r\n\r\n            </div>\r\n          </Row>\r\n        </Container>\r\n        <Container>\r\n          <Row>\r\n            <Table \r\n              list={ list }\r\n              removeItem={ this.removeItem }\r\n            /> \r\n          </Row>\r\n        </Container>\r\n        <Container>\r\n          <Row>\r\n            <div className=\"text-center alert\">\r\n                <ButtonWithLoading \r\n                    isLoading={ isLoading }\r\n                    className=\"btn btn-success\"\r\n                    onClick= {\r\n                      () => this.fetchTopStories(searchTerm, page + 1)\r\n                    }\r\n                  >\r\n                  Load More Entries\r\n                </ButtonWithLoading>\r\n            </div>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst ButtonWithLoading = withLoading(Button);\r\n\r\nexport default Javascript;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Loading from '../Loading/Loading';\r\nimport Table from '../../components/Table/index';\r\nimport { Button, Search, Sort } from '../../components/Button/index';\r\nimport { Container, Row, Col, FormGroup }from 'react-bootstrap';\r\nimport { DEFAULT_HPP, DEFAULT_PAGE, DEFAULT_QUERY, PATH_BASE,\r\n         PATH_SEARCH, PARAM_HPP, PARAM_PAGE, PARAM_SEARCH } from '../../constants/index';\r\nimport PropTypes from 'prop-types';\r\nimport { sortBy, update } from 'lodash';\r\n\r\nconst urlTemplate = `${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${DEFAULT_QUERY}&${PARAM_PAGE}${DEFAULT_PAGE}&${PARAM_HPP}${DEFAULT_HPP}`;\r\nconsole.log(urlTemplate);\r\n\r\nfunction isSearched(searchTerm) {\r\n    return (item) => (!searchTerm && !searchTerm.length > 2)|| item.title.toLowerCase().includes(searchTerm.toLowerCase());\r\n}\r\n\r\nconst withLoading = (Component) => ({isLoading, ...rest}) => isLoading ? <Loading message='Loading data...' /> : <Component {...rest} />;\r\n\r\nconst updateTopStories = (hits, page) => (prevState) => {\r\n  const {searchKey, results} = prevState;\r\n  const oldHits = results && results[searchKey] ? results[searchKey].hits : [];\r\n  const updatedHits = [...oldHits, ...hits];\r\n\r\n  return {\r\n    results: {...results,[searchKey]: {hits: updatedHits, page}},\r\n    isLoading: false\r\n  }\r\n};\r\nclass Python extends Component {\r\n   // setting up internal component state\r\n  // ES6 class can use constructor to initialize internal state\r\n  constructor(props){\r\n    // super props sets this.props to the constructor\r\n    super(props);\r\n\r\n    // setting up state\r\n    this.state = {\r\n      results: null,\r\n      searchKey: '',\r\n      searchTerm: 'Python',\r\n      isLoading: false,\r\n    }\r\n\r\n    // bind the functions to this (app component)\r\n    this.removeItem = this.removeItem.bind(this);\r\n    this.searchValue = this.searchValue.bind(this);\r\n    this.fetchTopStories = this.fetchTopStories.bind(this);\r\n    this.setTopStories = this.setTopStories.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n    this.checkTopStoriesSearchTerm = this.checkTopStoriesSearchTerm.bind(this);\r\n  }\r\n\r\n  // check top stories search term\r\n  checkTopStoriesSearchTerm(searchTerm) {\r\n    return !this.state.results[searchTerm];\r\n  }\r\n\r\n  // set top stories\r\n  setTopStories(result){\r\n    // get the hits and page from result\r\n    const { hits, page } = result;\r\n\r\n    // this.setState((prevState) => {\r\n    //   const {searchKey, results} = this.state;\r\n    //   const oldHits = results && results[searchKey] ? results[searchKey].hits : [];\r\n    //   const updatedHits = [...oldHits, ...hits];\r\n\r\n    //   return {\r\n    //     results: {...results,[searchKey]: {hits: updatedHits, page}},\r\n    //     isLoading: false\r\n    //   }\r\n    // });\r\n\r\n    this.setState(updateTopStories(hits, page));\r\n  }\r\n\r\n  // fetch top stories\r\n  fetchTopStories(searchTerm, page){\r\n    this.setState({\r\n      isLoading: true\r\n    })\r\n    fetch(`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}\r\n    &${PARAM_PAGE}${page}&${PARAM_HPP}${DEFAULT_HPP}`)\r\n      .then(response => {       \r\n        return response.json()\r\n      })\r\n      .then(result => {\r\n        return this.setTopStories(result);\r\n      })\r\n      .catch(e => e);\r\n  }\r\n\r\n  // component did mount\r\n  componentDidMount() {\r\n    const {searchTerm} = this.state;\r\n    this.setState({\r\n      searchKey: searchTerm\r\n    });\r\n    this.fetchTopStories(searchTerm, DEFAULT_PAGE);\r\n  }\r\n\r\n  // on search submit function\r\n  onSubmit(event) {\r\n    const {searchTerm} = this.state;\r\n    this.setState({\r\n      searchKey: searchTerm\r\n    });\r\n    if (this.checkTopStoriesSearchTerm(searchTerm)) {\r\n      this.fetchTopStories(this.state.searchTerm, DEFAULT_PAGE);\r\n    }\r\n    event.preventDefault();\r\n  }\r\n\r\n \r\n // lets rewrite removeItem function in ES6\r\n removeItem(id){\r\n  const { results, searchKey } = this.state;\r\n  const { hits, page } = results[searchKey];\r\n  // const isNotId = item => item.objectID !== id;\r\n  const updatedList = hits.filter(item => item.objectID !== id);\r\n  // this.setState({ result: Object.assign({}, this.state.result, {hits: updatedList}) });\r\n  this.setState({ \r\n    results: {\r\n      ...results, \r\n      [searchKey]: { hits: updatedList, page } \r\n    } \r\n  });\r\n }\r\n\r\n // get input field value from search form\r\n searchValue(event){\r\n  // console.log(event)\r\n  this.setState({ searchTerm: event.target.value });\r\n }\r\n\r\n  render() {\r\n\r\n    const { results, searchTerm, searchKey, isLoading } = this.state;\r\n\r\n    // if (!result) { return null; }\r\n    const page = (results && results[searchKey] && results[searchKey].page) || 0;\r\n\r\n    const list = (results && results[searchKey] && results[searchKey].hits) || [];\r\n\r\n    return (\r\n      <div>\r\n\r\n        <Container fluid>\r\n          <Row>\r\n            <div className=\"jumbotron text-center\">\r\n\r\n            <Search\r\n              onChange={ this.searchValue } \r\n              value={ searchTerm }\r\n              onSubmit={ this.onSubmit }\r\n            >NEWSAPP</Search>\r\n\r\n            </div>\r\n          </Row>\r\n        </Container>\r\n        <Container>\r\n          <Row>\r\n            <Table \r\n              list={ list }\r\n              removeItem={ this.removeItem }\r\n            /> \r\n          </Row>\r\n        </Container>\r\n        <Container>\r\n          <Row>\r\n            <div className=\"text-center alert\">\r\n                <ButtonWithLoading \r\n                    isLoading={ isLoading }\r\n                    className=\"btn btn-success\"\r\n                    onClick= {\r\n                      () => this.fetchTopStories(searchTerm, page + 1)\r\n                    }\r\n                  >\r\n                  Load More Entries\r\n                </ButtonWithLoading>\r\n            </div>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst ButtonWithLoading = withLoading(Button);\r\n\r\nexport default Python;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Loading from '../Loading/Loading';\r\nimport Table from '../../components/Table/index';\r\nimport { Button, Search, Sort } from '../../components/Button/index';\r\nimport { Container, Row, Col, FormGroup }from 'react-bootstrap';\r\nimport { DEFAULT_HPP, DEFAULT_PAGE, DEFAULT_QUERY, PATH_BASE,\r\n         PATH_SEARCH, PARAM_HPP, PARAM_PAGE, PARAM_SEARCH } from '../../constants/index';\r\nimport PropTypes from 'prop-types';\r\nimport { sortBy, update } from 'lodash';\r\n\r\nconst urlTemplate = `${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${DEFAULT_QUERY}&${PARAM_PAGE}${DEFAULT_PAGE}&${PARAM_HPP}${DEFAULT_HPP}`;\r\nconsole.log(urlTemplate);\r\n\r\nfunction isSearched(searchTerm) {\r\n    return (item) => (!searchTerm && !searchTerm.length > 2)|| item.title.toLowerCase().includes(searchTerm.toLowerCase());\r\n}\r\n\r\nconst withLoading = (Component) => ({isLoading, ...rest}) => isLoading ? <Loading message='Loading data...' /> : <Component {...rest} />;\r\n\r\nconst updateTopStories = (hits, page) => (prevState) => {\r\n  const {searchKey, results} = prevState;\r\n  const oldHits = results && results[searchKey] ? results[searchKey].hits : [];\r\n  const updatedHits = [...oldHits, ...hits];\r\n\r\n  return {\r\n    results: {...results,[searchKey]: {hits: updatedHits, page}},\r\n    isLoading: false\r\n  }\r\n};\r\nclass Php extends Component {\r\n   // setting up internal component state\r\n  // ES6 class can use constructor to initialize internal state\r\n  constructor(props){\r\n    // super props sets this.props to the constructor\r\n    super(props);\r\n\r\n    // setting up state\r\n    this.state = {\r\n      results: null,\r\n      searchKey: '',\r\n      searchTerm: 'PHP',\r\n      isLoading: false,\r\n    }\r\n\r\n    // bind the functions to this (app component)\r\n    this.removeItem = this.removeItem.bind(this);\r\n    this.searchValue = this.searchValue.bind(this);\r\n    this.fetchTopStories = this.fetchTopStories.bind(this);\r\n    this.setTopStories = this.setTopStories.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n    this.checkTopStoriesSearchTerm = this.checkTopStoriesSearchTerm.bind(this);\r\n  }\r\n\r\n  // check top stories search term\r\n  checkTopStoriesSearchTerm(searchTerm) {\r\n    return !this.state.results[searchTerm];\r\n  }\r\n\r\n  // set top stories\r\n  setTopStories(result){\r\n    // get the hits and page from result\r\n    const { hits, page } = result;\r\n\r\n    // this.setState((prevState) => {\r\n    //   const {searchKey, results} = this.state;\r\n    //   const oldHits = results && results[searchKey] ? results[searchKey].hits : [];\r\n    //   const updatedHits = [...oldHits, ...hits];\r\n\r\n    //   return {\r\n    //     results: {...results,[searchKey]: {hits: updatedHits, page}},\r\n    //     isLoading: false\r\n    //   }\r\n    // });\r\n\r\n    this.setState(updateTopStories(hits, page));\r\n  }\r\n\r\n  // fetch top stories\r\n  fetchTopStories(searchTerm, page){\r\n    this.setState({\r\n      isLoading: true\r\n    })\r\n    fetch(`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}\r\n    &${PARAM_PAGE}${page}&${PARAM_HPP}${DEFAULT_HPP}`)\r\n      .then(response => {       \r\n        return response.json()\r\n      })\r\n      .then(result => {\r\n        return this.setTopStories(result);\r\n      })\r\n      .catch(e => e);\r\n  }\r\n\r\n  // component did mount\r\n  componentDidMount() {\r\n    const {searchTerm} = this.state;\r\n    this.setState({\r\n      searchKey: searchTerm\r\n    });\r\n    this.fetchTopStories(searchTerm, DEFAULT_PAGE);\r\n  }\r\n\r\n  // on search submit function\r\n  onSubmit(event) {\r\n    const {searchTerm} = this.state;\r\n    this.setState({\r\n      searchKey: searchTerm\r\n    });\r\n    if (this.checkTopStoriesSearchTerm(searchTerm)) {\r\n      this.fetchTopStories(this.state.searchTerm, DEFAULT_PAGE);\r\n    }\r\n    event.preventDefault();\r\n  }\r\n\r\n \r\n // lets rewrite removeItem function in ES6\r\n removeItem(id){\r\n  const { results, searchKey } = this.state;\r\n  const { hits, page } = results[searchKey];\r\n  // const isNotId = item => item.objectID !== id;\r\n  const updatedList = hits.filter(item => item.objectID !== id);\r\n  // this.setState({ result: Object.assign({}, this.state.result, {hits: updatedList}) });\r\n  this.setState({ \r\n    results: {\r\n      ...results, \r\n      [searchKey]: { hits: updatedList, page } \r\n    } \r\n  });\r\n }\r\n\r\n // get input field value from search form\r\n searchValue(event){\r\n  // console.log(event)\r\n  this.setState({ searchTerm: event.target.value });\r\n }\r\n\r\n  render() {\r\n\r\n    const { results, searchTerm, searchKey, isLoading } = this.state;\r\n\r\n    // if (!result) { return null; }\r\n    const page = (results && results[searchKey] && results[searchKey].page) || 0;\r\n\r\n    const list = (results && results[searchKey] && results[searchKey].hits) || [];\r\n\r\n    return (\r\n      <div>\r\n\r\n        <Container fluid>\r\n          <Row>\r\n            <div className=\"jumbotron text-center\">\r\n\r\n            <Search\r\n              onChange={ this.searchValue } \r\n              value={ searchTerm }\r\n              onSubmit={ this.onSubmit }\r\n            >NEWSAPP</Search>\r\n\r\n            </div>\r\n          </Row>\r\n        </Container>\r\n        <Container>\r\n          <Row>\r\n            <Table \r\n              list={ list }\r\n              removeItem={ this.removeItem }\r\n            /> \r\n          </Row>\r\n        </Container>\r\n        <Container>\r\n          <Row>\r\n            <div className=\"text-center alert\">\r\n                <ButtonWithLoading \r\n                    isLoading={ isLoading }\r\n                    className=\"btn btn-success\"\r\n                    onClick= {\r\n                      () => this.fetchTopStories(searchTerm, page + 1)\r\n                    }\r\n                  >\r\n                  Load More Entries\r\n                </ButtonWithLoading>\r\n            </div>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst ButtonWithLoading = withLoading(Button);\r\n\r\nexport default Php;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/index';\nimport { Navbar, Nav, NavItem } from 'react-bootstrap';\nimport { BrowserRouter as Router, Route, Link, NavLink } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Javascript from './components/Javascript';\nimport Python from './components/Python';\nimport Php from './components/PHP';\n\nconst Root = () => \n  <Router basename=\"/newsapp/\">\n    <div>\n      <Navbar>\n          <Nav>\n            <Navbar.Brand>\n                <Link className=\"nav-link\" to=\"/\">News App</Link>\n            </Navbar.Brand>\n            <Navbar.Toggle />\n          </Nav>\n          <Navbar.Collapse>\n            <Nav>\n              <NavItem exact activeClassName=\"active\">\n                <Link className=\"nav-link\" to=\"/about\">About</Link>\n              </NavItem>\n              <NavItem  activeClassName=\"active\">\n                <Link className=\"nav-link\" activeClassName=\"active\" to=\"/javascript\">Javascript</Link>\n              </NavItem>\n              <NavItem  activeClassName=\"active\">\n                <Link className=\"nav-link\" activeClassName=\"active\" to=\"/python\">Python</Link>\n              </NavItem>\n              <NavItem  activeClassName=\"active\">\n                <Link className=\"nav-link\" activeClassName=\"active\" to=\"/php\">PHP</Link>\n              </NavItem>\n            </Nav>\n          </Navbar.Collapse>\n      </Navbar>\n      <Route exact path=\"/\" component={ App } />\n      <Route exact path=\"/about\" component={ About } />\n      <Route exact path=\"/javascript\" component={ Javascript } />\n      <Route exact path=\"/python\" component={ Python } />\n      <Route exact path=\"/php\" component={ Php } />\n    </div>\n  </Router>\n\nconst About = () =>\n<div>\n    <h1>\n        This is about page...\n    </h1>\n</div>\n\nReactDOM.render(\n  <React.StrictMode>\n    <Root />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}